// =====================================================
// Exolynk — Customer Order (основная схема, PostgreSQL)
// =====================================================

// ---------- Справочники/Enums ----------
Enum order_status {
  OPEN
  CLOSED
}

Enum order_state {
  NEW
  CHECK
  CONFIRM_WITH_CLIENT
  APPROVAL          // проверка условий
  PICKING           // комплектация
  SHIPMENT          // отгрузка -> CLOSED(SUCCESS)
  CLOSE_REQUEST     // ручное закрытие (требует причину)
}

Enum close_outcome {
  SUCCESS
  UNSUCCESS
}

Enum close_reason {
  CUSTOMER_DECLINED
  OUT_OF_STOCK
  PRICE_OR_TERMS
  DUPLICATE
  OTHER
}

// ---------- Системные таблицы ----------
Table Datei {
  id                  uuid [pk, default: `gen_random_uuid()`]
  name                varchar(200)
  description         text
  filename            varchar(255)
  file_search_index   text
}

Table Bahnhof {
  id          uuid [pk, default: `gen_random_uuid()`]
  name        varchar(200)
  description text
}

// ---------- Контрагенты ----------
Table Firma {
  id          uuid [pk, default: `gen_random_uuid()`]
  name        varchar(200) [not null]
  address     text
  phone       varchar(30)
  website     varchar(200)
  created_at  timestamptz [not null, default: `now()`]

  indexes {
    (name)
  }
}

Table Kontakt {
  id             uuid [pk, default: `gen_random_uuid()`]
  contact_type   varchar(50) [not null, note: 'Lead|Client']
  firstname      varchar(100)
  lastname       varchar(100)
  company_id     uuid [ref: > Firma.id] // ссылка на компанию
  email          varchar(320)
  phone          varchar(30)
  status         varchar(20)  // aktiv|inaktiv
  register_date  timestamptz
  created_at     timestamptz [not null, default: `now()`]
  updated_at     timestamptz [not null, default: `now()`]

  indexes {
    (company_id)
    (email)
    (lastname, firstname)
  }
}

// ---------- Товары ----------
Table Product {
  id          uuid [pk, default: `gen_random_uuid()`]
  name        varchar(200) [not null]
  description text
  price       numeric(12,2) [not null, default: 0]
  created_at  timestamptz [not null, default: `now()`]

  indexes {
    (name)
  }
}

// ---------- Заказ ----------
Table "Order" {
  id             uuid [pk, default: `gen_random_uuid()`]
  customer_id    uuid [not null, ref: > Kontakt.id]
  order_no       varchar(30) [unique, note: 'Внутренний номер']
  currency       char(3) [not null, default: 'CHF']
  total_amount   numeric(12,2) [not null, default: 0]

  status         order_status [not null, default: 'OPEN']   // Открыт/Закрыт
  state          order_state  [not null, default: 'NEW']    // Новый→...→Отгрузка/Закрыть
  close_outcome  close_outcome                              // SUCCESS|UNSUCCESS
  close_reason   close_reason                               // обязателен при UNSUCCESS
  closed_at      timestamptz

  created_at     timestamptz [not null, default: `now()`]
  updated_at     timestamptz [not null, default: `now()`]

  indexes {
    (customer_id)
    (status, state)
    (created_at)
  }
}

Table OrderItem {
  id          uuid [pk, default: `gen_random_uuid()`]
  order_id    uuid [not null, ref: > "Order".id]
  product_id  uuid [not null, ref: > Product.id]
  line_no     int  [not null]
  qty         numeric(12,3) [not null, default: 1]
  price       numeric(12,2) [not null, default: 0]
  amount      numeric(12,2) [not null, default: 0] // qty*price (можно считать триггером)

  indexes {
    (order_id)
    (product_id)
  }
}

// ---------- Аудит состояний (по желанию) ----------
Table OrderStateHistory {
  id          uuid [pk, default: `gen_random_uuid()`]
  order_id    uuid [not null, ref: > "Order".id]
  from_state  order_state
  to_state    order_state [not null]
  changed_at  timestamptz [not null, default: `now()`]
  changed_by  uuid        // ref на Benutzer.id (см. вспомогательный блок)
  note        text

  indexes {
    (order_id, changed_at)
  }
}

// =====================================================
// ВСПОМОГАТЕЛЬНЫЙ БЛОК — RBAC (Users/Roles/Rights)
// =====================================================
Table Benutzer {
  id            uuid [pk, default: `gen_random_uuid()`]
  display_name  varchar(150) [not null]
  email         varchar(320) [unique]
  password_hash text
  status        varchar(20)   // aktiv|inaktiv
  created_at    timestamptz [not null, default: `now()`]
}

Table Rolle {
  id          uuid [pk, default: `gen_random_uuid()`]
  name        varchar(100) [not null, unique]
  description text
}

Table Rechte {
  id          uuid [pk, default: `gen_random_uuid()`]
  name        varchar(100) [not null, unique]
  description text
}

// m:n Benutzer <-> Rolle
Table BenutzerRolle {
  id           uuid [pk, default: `gen_random_uuid()`]
  benutzer_id  uuid [not null, ref: > Benutzer.id]
  rolle_id     uuid [not null, ref: > Rolle.id]

  indexes {
    (benutzer_id, rolle_id) [unique]
  }
}

// m:n Rolle <-> Rechte
Table RolleRechte {
  id          uuid [pk, default: `gen_random_uuid()`]
  rolle_id    uuid [not null, ref: > Rolle.id]
  rechte_id   uuid [not null, ref: > Rechte.id]

  indexes {
    (rolle_id, rechte_id) [unique]
  }
}
